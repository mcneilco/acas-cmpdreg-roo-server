// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.cmpdreg.domain;

import com.labsynch.cmpdreg.domain.FileList;
import com.labsynch.cmpdreg.domain.Lot;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect FileList_Roo_Finder {
    
    public static Long FileList.countFindFileListsByLot(Lot lot) {
        if (lot == null) throw new IllegalArgumentException("The lot argument is required");
        EntityManager em = FileList.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM FileList AS o WHERE o.lot = :lot", Long.class);
        q.setParameter("lot", lot);
        return ((Long) q.getSingleResult());
    }
    
    public static Long FileList.countFindFileListsByUrlEquals(String url) {
        if (url == null || url.length() == 0) throw new IllegalArgumentException("The url argument is required");
        EntityManager em = FileList.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM FileList AS o WHERE o.url = :url", Long.class);
        q.setParameter("url", url);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<FileList> FileList.findFileListsByLot(Lot lot, String sortFieldName, String sortOrder) {
        if (lot == null) throw new IllegalArgumentException("The lot argument is required");
        EntityManager em = FileList.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM FileList AS o WHERE o.lot = :lot");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<FileList> q = em.createQuery(queryBuilder.toString(), FileList.class);
        q.setParameter("lot", lot);
        return q;
    }
    
    public static TypedQuery<FileList> FileList.findFileListsByUrlEquals(String url, String sortFieldName, String sortOrder) {
        if (url == null || url.length() == 0) throw new IllegalArgumentException("The url argument is required");
        EntityManager em = FileList.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM FileList AS o WHERE o.url = :url");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<FileList> q = em.createQuery(queryBuilder.toString(), FileList.class);
        q.setParameter("url", url);
        return q;
    }
    
}
