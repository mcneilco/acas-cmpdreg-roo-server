// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.cmpdreg.domain;

import com.labsynch.cmpdreg.domain.BulkLoadFile;
import com.labsynch.cmpdreg.domain.Parent;
import com.labsynch.cmpdreg.domain.SaltForm;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Parent_Roo_Finder {
    
    public static Long Parent.countFindParentsByBulkLoadFileEquals(BulkLoadFile bulkLoadFile) {
        if (bulkLoadFile == null) throw new IllegalArgumentException("The bulkLoadFile argument is required");
        EntityManager em = Parent.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Parent AS o WHERE o.bulkLoadFile = :bulkLoadFile", Long.class);
        q.setParameter("bulkLoadFile", bulkLoadFile);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Parent.countFindParentsByCdId(int CdId) {
        EntityManager em = Parent.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Parent AS o WHERE o.CdId = :CdId", Long.class);
        q.setParameter("CdId", CdId);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Parent.countFindParentsByCommonNameLike(String commonName) {
        if (commonName == null || commonName.length() == 0) throw new IllegalArgumentException("The commonName argument is required");
        commonName = commonName.replace('*', '%');
        if (commonName.charAt(0) != '%') {
            commonName = "%" + commonName;
        }
        if (commonName.charAt(commonName.length() - 1) != '%') {
            commonName = commonName + "%";
        }
        EntityManager em = Parent.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Parent AS o WHERE LOWER(o.commonName) LIKE LOWER(:commonName)", Long.class);
        q.setParameter("commonName", commonName);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Parent.countFindParentsByCorpNameEquals(String corpName) {
        if (corpName == null || corpName.length() == 0) throw new IllegalArgumentException("The corpName argument is required");
        EntityManager em = Parent.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Parent AS o WHERE o.corpName = :corpName", Long.class);
        q.setParameter("corpName", corpName);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Parent.countFindParentsByCorpNameLike(String corpName) {
        if (corpName == null || corpName.length() == 0) throw new IllegalArgumentException("The corpName argument is required");
        corpName = corpName.replace('*', '%');
        if (corpName.charAt(0) != '%') {
            corpName = "%" + corpName;
        }
        if (corpName.charAt(corpName.length() - 1) != '%') {
            corpName = corpName + "%";
        }
        EntityManager em = Parent.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Parent AS o WHERE LOWER(o.corpName) LIKE LOWER(:corpName)", Long.class);
        q.setParameter("corpName", corpName);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Parent.countFindParentsBySaltForms(Set<SaltForm> saltForms) {
        if (saltForms == null) throw new IllegalArgumentException("The saltForms argument is required");
        EntityManager em = Parent.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT COUNT(o) FROM Parent AS o WHERE");
        for (int i = 0; i < saltForms.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :saltForms_item").append(i).append(" MEMBER OF o.saltForms");
        }
        TypedQuery q = em.createQuery(queryBuilder.toString(), Long.class);
        int saltFormsIndex = 0;
        for (SaltForm _saltform: saltForms) {
            q.setParameter("saltForms_item" + saltFormsIndex++, _saltform);
        }
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Parent> Parent.findParentsByBulkLoadFileEquals(BulkLoadFile bulkLoadFile) {
        if (bulkLoadFile == null) throw new IllegalArgumentException("The bulkLoadFile argument is required");
        EntityManager em = Parent.entityManager();
        TypedQuery<Parent> q = em.createQuery("SELECT o FROM Parent AS o WHERE o.bulkLoadFile = :bulkLoadFile", Parent.class);
        q.setParameter("bulkLoadFile", bulkLoadFile);
        return q;
    }
    
    public static TypedQuery<Parent> Parent.findParentsByBulkLoadFileEquals(BulkLoadFile bulkLoadFile, String sortFieldName, String sortOrder) {
        if (bulkLoadFile == null) throw new IllegalArgumentException("The bulkLoadFile argument is required");
        EntityManager em = Parent.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Parent AS o WHERE o.bulkLoadFile = :bulkLoadFile");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Parent> q = em.createQuery(queryBuilder.toString(), Parent.class);
        q.setParameter("bulkLoadFile", bulkLoadFile);
        return q;
    }
    
    public static TypedQuery<Parent> Parent.findParentsByCdId(int CdId, String sortFieldName, String sortOrder) {
        EntityManager em = Parent.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Parent AS o WHERE o.CdId = :CdId");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Parent> q = em.createQuery(queryBuilder.toString(), Parent.class);
        q.setParameter("CdId", CdId);
        return q;
    }
    
    public static TypedQuery<Parent> Parent.findParentsByCommonNameLike(String commonName) {
        if (commonName == null || commonName.length() == 0) throw new IllegalArgumentException("The commonName argument is required");
        commonName = commonName.replace('*', '%');
        if (commonName.charAt(0) != '%') {
            commonName = "%" + commonName;
        }
        if (commonName.charAt(commonName.length() - 1) != '%') {
            commonName = commonName + "%";
        }
        EntityManager em = Parent.entityManager();
        TypedQuery<Parent> q = em.createQuery("SELECT o FROM Parent AS o WHERE LOWER(o.commonName) LIKE LOWER(:commonName)", Parent.class);
        q.setParameter("commonName", commonName);
        return q;
    }
    
    public static TypedQuery<Parent> Parent.findParentsByCommonNameLike(String commonName, String sortFieldName, String sortOrder) {
        if (commonName == null || commonName.length() == 0) throw new IllegalArgumentException("The commonName argument is required");
        commonName = commonName.replace('*', '%');
        if (commonName.charAt(0) != '%') {
            commonName = "%" + commonName;
        }
        if (commonName.charAt(commonName.length() - 1) != '%') {
            commonName = commonName + "%";
        }
        EntityManager em = Parent.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Parent AS o WHERE LOWER(o.commonName) LIKE LOWER(:commonName)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Parent> q = em.createQuery(queryBuilder.toString(), Parent.class);
        q.setParameter("commonName", commonName);
        return q;
    }
    
    public static TypedQuery<Parent> Parent.findParentsByCorpNameEquals(String corpName) {
        if (corpName == null || corpName.length() == 0) throw new IllegalArgumentException("The corpName argument is required");
        EntityManager em = Parent.entityManager();
        TypedQuery<Parent> q = em.createQuery("SELECT o FROM Parent AS o WHERE o.corpName = :corpName", Parent.class);
        q.setParameter("corpName", corpName);
        return q;
    }
    
    public static TypedQuery<Parent> Parent.findParentsByCorpNameEquals(String corpName, String sortFieldName, String sortOrder) {
        if (corpName == null || corpName.length() == 0) throw new IllegalArgumentException("The corpName argument is required");
        EntityManager em = Parent.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Parent AS o WHERE o.corpName = :corpName");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Parent> q = em.createQuery(queryBuilder.toString(), Parent.class);
        q.setParameter("corpName", corpName);
        return q;
    }
    
    public static TypedQuery<Parent> Parent.findParentsByCorpNameLike(String corpName) {
        if (corpName == null || corpName.length() == 0) throw new IllegalArgumentException("The corpName argument is required");
        corpName = corpName.replace('*', '%');
        if (corpName.charAt(0) != '%') {
            corpName = "%" + corpName;
        }
        if (corpName.charAt(corpName.length() - 1) != '%') {
            corpName = corpName + "%";
        }
        EntityManager em = Parent.entityManager();
        TypedQuery<Parent> q = em.createQuery("SELECT o FROM Parent AS o WHERE LOWER(o.corpName) LIKE LOWER(:corpName)", Parent.class);
        q.setParameter("corpName", corpName);
        return q;
    }
    
    public static TypedQuery<Parent> Parent.findParentsByCorpNameLike(String corpName, String sortFieldName, String sortOrder) {
        if (corpName == null || corpName.length() == 0) throw new IllegalArgumentException("The corpName argument is required");
        corpName = corpName.replace('*', '%');
        if (corpName.charAt(0) != '%') {
            corpName = "%" + corpName;
        }
        if (corpName.charAt(corpName.length() - 1) != '%') {
            corpName = corpName + "%";
        }
        EntityManager em = Parent.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Parent AS o WHERE LOWER(o.corpName) LIKE LOWER(:corpName)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Parent> q = em.createQuery(queryBuilder.toString(), Parent.class);
        q.setParameter("corpName", corpName);
        return q;
    }
    
    public static TypedQuery<Parent> Parent.findParentsBySaltForms(Set<SaltForm> saltForms) {
        if (saltForms == null) throw new IllegalArgumentException("The saltForms argument is required");
        EntityManager em = Parent.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Parent AS o WHERE");
        for (int i = 0; i < saltForms.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :saltForms_item").append(i).append(" MEMBER OF o.saltForms");
        }
        TypedQuery<Parent> q = em.createQuery(queryBuilder.toString(), Parent.class);
        int saltFormsIndex = 0;
        for (SaltForm _saltform: saltForms) {
            q.setParameter("saltForms_item" + saltFormsIndex++, _saltform);
        }
        return q;
    }
    
    public static TypedQuery<Parent> Parent.findParentsBySaltForms(Set<SaltForm> saltForms, String sortFieldName, String sortOrder) {
        if (saltForms == null) throw new IllegalArgumentException("The saltForms argument is required");
        EntityManager em = Parent.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Parent AS o WHERE");
        for (int i = 0; i < saltForms.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :saltForms_item").append(i).append(" MEMBER OF o.saltForms");
        }
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" " + sortOrder);
            }
        }
        TypedQuery<Parent> q = em.createQuery(queryBuilder.toString(), Parent.class);
        int saltFormsIndex = 0;
        for (SaltForm _saltform: saltForms) {
            q.setParameter("saltForms_item" + saltFormsIndex++, _saltform);
        }
        return q;
    }
    
}
