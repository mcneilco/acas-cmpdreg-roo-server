// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.cmpdreg.domain;

import com.labsynch.cmpdreg.domain.StandardizationDryrunCompound;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect StandardizationDryrunCompound_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager StandardizationDryrunCompound.entityManager;
    
    public static final List<String> StandardizationDryrunCompound.fieldNames4OrderClauseFilter = java.util.Arrays.asList("runNumber", "qcDate", "parentId", "corpName", "newDuplicates", "oldDuplicates", "changedStructure", "oldMolWeight", "newMolWeight", "displayChange", "asDrawnDisplayChange", "newDupeCount", "oldDupeCount", "alias", "stereoCategory", "stereoComment", "CdId", "molStructure", "comment", "ignore");
    
    public static final EntityManager StandardizationDryrunCompound.entityManager() {
        EntityManager em = new StandardizationDryrunCompound().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long StandardizationDryrunCompound.countStandardizationDryrunCompounds() {
        return entityManager().createQuery("SELECT COUNT(o) FROM StandardizationDryrunCompound o", Long.class).getSingleResult();
    }
    
    public static List<StandardizationDryrunCompound> StandardizationDryrunCompound.findAllStandardizationDryrunCompounds() {
        return entityManager().createQuery("SELECT o FROM StandardizationDryrunCompound o", StandardizationDryrunCompound.class).getResultList();
    }
    
    public static List<StandardizationDryrunCompound> StandardizationDryrunCompound.findAllStandardizationDryrunCompounds(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM StandardizationDryrunCompound o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, StandardizationDryrunCompound.class).getResultList();
    }
    
    public static StandardizationDryrunCompound StandardizationDryrunCompound.findStandardizationDryrunCompound(Long id) {
        if (id == null) return null;
        return entityManager().find(StandardizationDryrunCompound.class, id);
    }
    
    public static List<StandardizationDryrunCompound> StandardizationDryrunCompound.findStandardizationDryrunCompoundEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM StandardizationDryrunCompound o", StandardizationDryrunCompound.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<StandardizationDryrunCompound> StandardizationDryrunCompound.findStandardizationDryrunCompoundEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM StandardizationDryrunCompound o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, StandardizationDryrunCompound.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void StandardizationDryrunCompound.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void StandardizationDryrunCompound.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            StandardizationDryrunCompound attached = StandardizationDryrunCompound.findStandardizationDryrunCompound(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void StandardizationDryrunCompound.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void StandardizationDryrunCompound.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public StandardizationDryrunCompound StandardizationDryrunCompound.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        StandardizationDryrunCompound merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
