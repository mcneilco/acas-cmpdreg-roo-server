// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.cmpdreg.web;

import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.labsynch.cmpdreg.domain.Salt;

privileged aspect SaltController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByAbbrevEquals", "form" }, method = RequestMethod.GET)
    public String SaltController.findSaltsByAbbrevEqualsForm(Model uiModel) {
        return "salts/findSaltsByAbbrevEquals";
    }
    
    @RequestMapping(params = "find=ByAbbrevEquals", method = RequestMethod.GET)
    public String SaltController.findSaltsByAbbrevEquals(@RequestParam("abbrev") String abbrev, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("salts", Salt.findSaltsByAbbrevEquals(abbrev, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Salt.countFindSaltsByAbbrevEquals(abbrev) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("salts", Salt.findSaltsByAbbrevEquals(abbrev, sortFieldName, sortOrder).getResultList());
        }
        return "salts/list";
    }
    
    @RequestMapping(params = { "find=ByAbbrevEqualsAndNameEquals", "form" }, method = RequestMethod.GET)
    public String SaltController.findSaltsByAbbrevEqualsAndNameEqualsForm(Model uiModel) {
        return "salts/findSaltsByAbbrevEqualsAndNameEquals";
    }
    
    @RequestMapping(params = "find=ByAbbrevEqualsAndNameEquals", method = RequestMethod.GET)
    public String SaltController.findSaltsByAbbrevEqualsAndNameEquals(@RequestParam("abbrev") String abbrev, @RequestParam("name") String name, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("salts", Salt.findSaltsByAbbrevEqualsAndNameEquals(abbrev, name, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Salt.countFindSaltsByAbbrevEqualsAndNameEquals(abbrev, name) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("salts", Salt.findSaltsByAbbrevEqualsAndNameEquals(abbrev, name, sortFieldName, sortOrder).getResultList());
        }
        return "salts/list";
    }
    
    @RequestMapping(params = { "find=ByAbbrevLike", "form" }, method = RequestMethod.GET)
    public String SaltController.findSaltsByAbbrevLikeForm(Model uiModel) {
        return "salts/findSaltsByAbbrevLike";
    }
    
    @RequestMapping(params = "find=ByAbbrevLike", method = RequestMethod.GET)
    public String SaltController.findSaltsByAbbrevLike(@RequestParam("abbrev") String abbrev, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("salts", Salt.findSaltsByAbbrevLike(abbrev, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Salt.countFindSaltsByAbbrevLike(abbrev) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("salts", Salt.findSaltsByAbbrevLike(abbrev, sortFieldName, sortOrder).getResultList());
        }
        return "salts/list";
    }
    
    @RequestMapping(params = { "find=ByCdId", "form" }, method = RequestMethod.GET)
    public String SaltController.findSaltsByCdIdForm(Model uiModel) {
        return "salts/findSaltsByCdId";
    }
    
    @RequestMapping(params = "find=ByCdId", method = RequestMethod.GET)
    public String SaltController.findSaltsByCdId(@RequestParam("cdId") int cdId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("salts", Salt.findSaltsByCdId(cdId, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Salt.countFindSaltsByCdId(cdId) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("salts", Salt.findSaltsByCdId(cdId, sortFieldName, sortOrder).getResultList());
        }
        return "salts/list";
    }
    
    @RequestMapping(params = { "find=ByNameEquals", "form" }, method = RequestMethod.GET)
    public String SaltController.findSaltsByNameEqualsForm(Model uiModel) {
        return "salts/findSaltsByNameEquals";
    }
    
    @RequestMapping(params = "find=ByNameEquals", method = RequestMethod.GET)
    public String SaltController.findSaltsByNameEquals(@RequestParam("name") String name, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("salts", Salt.findSaltsByNameEquals(name, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Salt.countFindSaltsByNameEquals(name) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("salts", Salt.findSaltsByNameEquals(name, sortFieldName, sortOrder).getResultList());
        }
        return "salts/list";
    }
    
}
