// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.cmpdreg.domain;

import com.labsynch.cmpdreg.domain.Parent;
import com.labsynch.cmpdreg.domain.ParentAlias;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect ParentAlias_Roo_Finder {
    
    public static Long ParentAlias.countFindParentAliasesByAliasNameEquals(String aliasName) {
        if (aliasName == null || aliasName.length() == 0) throw new IllegalArgumentException("The aliasName argument is required");
        EntityManager em = ParentAlias.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ParentAlias AS o WHERE o.aliasName = :aliasName", Long.class);
        q.setParameter("aliasName", aliasName);
        return ((Long) q.getSingleResult());
    }
    
    public static Long ParentAlias.countFindParentAliasesByAliasNameEqualsAndLsTypeEqualsAndLsKindEquals(String aliasName, String lsType, String lsKind) {
        if (aliasName == null || aliasName.length() == 0) throw new IllegalArgumentException("The aliasName argument is required");
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = ParentAlias.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ParentAlias AS o WHERE o.aliasName = :aliasName  AND o.lsType = :lsType  AND o.lsKind = :lsKind", Long.class);
        q.setParameter("aliasName", aliasName);
        q.setParameter("lsType", lsType);
        q.setParameter("lsKind", lsKind);
        return ((Long) q.getSingleResult());
    }
    
    public static Long ParentAlias.countFindParentAliasesByParent(Parent parent) {
        if (parent == null) throw new IllegalArgumentException("The parent argument is required");
        EntityManager em = ParentAlias.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ParentAlias AS o WHERE o.parent = :parent", Long.class);
        q.setParameter("parent", parent);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<ParentAlias> ParentAlias.findParentAliasesByAliasNameEquals(String aliasName) {
        if (aliasName == null || aliasName.length() == 0) throw new IllegalArgumentException("The aliasName argument is required");
        EntityManager em = ParentAlias.entityManager();
        TypedQuery<ParentAlias> q = em.createQuery("SELECT o FROM ParentAlias AS o WHERE o.aliasName = :aliasName", ParentAlias.class);
        q.setParameter("aliasName", aliasName);
        return q;
    }
    
    public static TypedQuery<ParentAlias> ParentAlias.findParentAliasesByAliasNameEquals(String aliasName, String sortFieldName, String sortOrder) {
        if (aliasName == null || aliasName.length() == 0) throw new IllegalArgumentException("The aliasName argument is required");
        EntityManager em = ParentAlias.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM ParentAlias AS o WHERE o.aliasName = :aliasName");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<ParentAlias> q = em.createQuery(queryBuilder.toString(), ParentAlias.class);
        q.setParameter("aliasName", aliasName);
        return q;
    }
    
    public static TypedQuery<ParentAlias> ParentAlias.findParentAliasesByAliasNameEqualsAndLsTypeEqualsAndLsKindEquals(String aliasName, String lsType, String lsKind) {
        if (aliasName == null || aliasName.length() == 0) throw new IllegalArgumentException("The aliasName argument is required");
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = ParentAlias.entityManager();
        TypedQuery<ParentAlias> q = em.createQuery("SELECT o FROM ParentAlias AS o WHERE o.aliasName = :aliasName  AND o.lsType = :lsType  AND o.lsKind = :lsKind", ParentAlias.class);
        q.setParameter("aliasName", aliasName);
        q.setParameter("lsType", lsType);
        q.setParameter("lsKind", lsKind);
        return q;
    }
    
    public static TypedQuery<ParentAlias> ParentAlias.findParentAliasesByAliasNameEqualsAndLsTypeEqualsAndLsKindEquals(String aliasName, String lsType, String lsKind, String sortFieldName, String sortOrder) {
        if (aliasName == null || aliasName.length() == 0) throw new IllegalArgumentException("The aliasName argument is required");
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = ParentAlias.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM ParentAlias AS o WHERE o.aliasName = :aliasName  AND o.lsType = :lsType  AND o.lsKind = :lsKind");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<ParentAlias> q = em.createQuery(queryBuilder.toString(), ParentAlias.class);
        q.setParameter("aliasName", aliasName);
        q.setParameter("lsType", lsType);
        q.setParameter("lsKind", lsKind);
        return q;
    }
    
    public static TypedQuery<ParentAlias> ParentAlias.findParentAliasesByParent(Parent parent) {
        if (parent == null) throw new IllegalArgumentException("The parent argument is required");
        EntityManager em = ParentAlias.entityManager();
        TypedQuery<ParentAlias> q = em.createQuery("SELECT o FROM ParentAlias AS o WHERE o.parent = :parent", ParentAlias.class);
        q.setParameter("parent", parent);
        return q;
    }
    
    public static TypedQuery<ParentAlias> ParentAlias.findParentAliasesByParent(Parent parent, String sortFieldName, String sortOrder) {
        if (parent == null) throw new IllegalArgumentException("The parent argument is required");
        EntityManager em = ParentAlias.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM ParentAlias AS o WHERE o.parent = :parent");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<ParentAlias> q = em.createQuery(queryBuilder.toString(), ParentAlias.class);
        q.setParameter("parent", parent);
        return q;
    }
    
}
