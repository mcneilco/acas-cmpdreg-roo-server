// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.cmpdreg.domain;

import com.labsynch.cmpdreg.domain.Salt;
import com.labsynch.cmpdreg.domain.SaltDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect SaltDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SaltDataOnDemand: @Component;
    
    private Random SaltDataOnDemand.rnd = new SecureRandom();
    
    private List<Salt> SaltDataOnDemand.data;
    
    public Salt SaltDataOnDemand.getNewTransientSalt(int index) {
        Salt obj = new Salt();
        setAbbrev(obj, index);
        setCdId(obj, index);
        setCharge(obj, index);
        setFormula(obj, index);
        setIgnore(obj, index);
        setMolStructure(obj, index);
        setMolWeight(obj, index);
        setName(obj, index);
        setOriginalStructure(obj, index);
        return obj;
    }
    
    public void SaltDataOnDemand.setAbbrev(Salt obj, int index) {
        String abbrev = "abbrev_" + index;
        if (abbrev.length() > 100) {
            abbrev = abbrev.substring(0, 100);
        }
        obj.setAbbrev(abbrev);
    }
    
    public void SaltDataOnDemand.setCdId(Salt obj, int index) {
        int cdId = index;
        obj.setCdId(cdId);
    }
    
    public void SaltDataOnDemand.setCharge(Salt obj, int index) {
        int charge = index;
        obj.setCharge(charge);
    }
    
    public void SaltDataOnDemand.setFormula(Salt obj, int index) {
        String formula = "formula_" + index;
        if (formula.length() > 255) {
            formula = formula.substring(0, 255);
        }
        obj.setFormula(formula);
    }
    
    public void SaltDataOnDemand.setIgnore(Salt obj, int index) {
        Boolean ignore = Boolean.TRUE;
        obj.setIgnore(ignore);
    }
    
    public void SaltDataOnDemand.setMolStructure(Salt obj, int index) {
        String molStructure = "molStructure_" + index;
        obj.setMolStructure(molStructure);
    }
    
    public void SaltDataOnDemand.setMolWeight(Salt obj, int index) {
        Double molWeight = new Integer(index).doubleValue();
        obj.setMolWeight(molWeight);
    }
    
    public void SaltDataOnDemand.setName(Salt obj, int index) {
        String name = "name_" + index;
        if (name.length() > 255) {
            name = name.substring(0, 255);
        }
        obj.setName(name);
    }
    
    public void SaltDataOnDemand.setOriginalStructure(Salt obj, int index) {
        String originalStructure = "originalStructure_" + index;
        obj.setOriginalStructure(originalStructure);
    }
    
    public Salt SaltDataOnDemand.getSpecificSalt(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Salt obj = data.get(index);
        Long id = obj.getId();
        return Salt.findSalt(id);
    }
    
    public Salt SaltDataOnDemand.getRandomSalt() {
        init();
        Salt obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Salt.findSalt(id);
    }
    
    public boolean SaltDataOnDemand.modifySalt(Salt obj) {
        return false;
    }
    
    public void SaltDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Salt.findSaltEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Salt' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Salt>();
        for (int i = 0; i < 10; i++) {
            Salt obj = getNewTransientSalt(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
