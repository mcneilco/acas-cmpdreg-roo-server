// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.cmpdreg.web;

import com.labsynch.cmpdreg.domain.BulkLoadFile;
import com.labsynch.cmpdreg.domain.Parent;
import com.labsynch.cmpdreg.domain.SaltForm;
import com.labsynch.cmpdreg.web.ParentController;
import java.util.Set;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect ParentController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByBulkLoadFileEquals", "form" }, method = RequestMethod.GET)
    public String ParentController.findParentsByBulkLoadFileEqualsForm(Model uiModel) {
        uiModel.addAttribute("bulkloadfiles", BulkLoadFile.findAllBulkLoadFiles());
        return "parents/findParentsByBulkLoadFileEquals";
    }
    
    @RequestMapping(params = "find=ByBulkLoadFileEquals", method = RequestMethod.GET)
    public String ParentController.findParentsByBulkLoadFileEquals(@RequestParam("bulkLoadFile") BulkLoadFile bulkLoadFile, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("parents", Parent.findParentsByBulkLoadFileEquals(bulkLoadFile, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Parent.countFindParentsByBulkLoadFileEquals(bulkLoadFile) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("parents", Parent.findParentsByBulkLoadFileEquals(bulkLoadFile, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "parents/list";
    }
    
    @RequestMapping(params = { "find=ByCdId", "form" }, method = RequestMethod.GET)
    public String ParentController.findParentsByCdIdForm(Model uiModel) {
        return "parents/findParentsByCdId";
    }
    
    @RequestMapping(params = "find=ByCdId", method = RequestMethod.GET)
    public String ParentController.findParentsByCdId(@RequestParam("cdId") int CdId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("parents", Parent.findParentsByCdId(CdId, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Parent.countFindParentsByCdId(CdId) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("parents", Parent.findParentsByCdId(CdId, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "parents/list";
    }
    
    @RequestMapping(params = { "find=ByCommonNameLike", "form" }, method = RequestMethod.GET)
    public String ParentController.findParentsByCommonNameLikeForm(Model uiModel) {
        return "parents/findParentsByCommonNameLike";
    }
    
    @RequestMapping(params = "find=ByCommonNameLike", method = RequestMethod.GET)
    public String ParentController.findParentsByCommonNameLike(@RequestParam("commonName") String commonName, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("parents", Parent.findParentsByCommonNameLike(commonName, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Parent.countFindParentsByCommonNameLike(commonName) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("parents", Parent.findParentsByCommonNameLike(commonName, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "parents/list";
    }
    
    @RequestMapping(params = { "find=ByCorpNameEquals", "form" }, method = RequestMethod.GET)
    public String ParentController.findParentsByCorpNameEqualsForm(Model uiModel) {
        return "parents/findParentsByCorpNameEquals";
    }
    
    @RequestMapping(params = "find=ByCorpNameEquals", method = RequestMethod.GET)
    public String ParentController.findParentsByCorpNameEquals(@RequestParam("corpName") String corpName, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("parents", Parent.findParentsByCorpNameEquals(corpName, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Parent.countFindParentsByCorpNameEquals(corpName) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("parents", Parent.findParentsByCorpNameEquals(corpName, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "parents/list";
    }
    
    @RequestMapping(params = { "find=ByCorpNameLike", "form" }, method = RequestMethod.GET)
    public String ParentController.findParentsByCorpNameLikeForm(Model uiModel) {
        return "parents/findParentsByCorpNameLike";
    }
    
    @RequestMapping(params = "find=ByCorpNameLike", method = RequestMethod.GET)
    public String ParentController.findParentsByCorpNameLike(@RequestParam("corpName") String corpName, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("parents", Parent.findParentsByCorpNameLike(corpName, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Parent.countFindParentsByCorpNameLike(corpName) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("parents", Parent.findParentsByCorpNameLike(corpName, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "parents/list";
    }
    
    @RequestMapping(params = { "find=BySaltForms", "form" }, method = RequestMethod.GET)
    public String ParentController.findParentsBySaltFormsForm(Model uiModel) {
        uiModel.addAttribute("saltforms", SaltForm.findAllSaltForms());
        return "parents/findParentsBySaltForms";
    }
    
    @RequestMapping(params = "find=BySaltForms", method = RequestMethod.GET)
    public String ParentController.findParentsBySaltForms(@RequestParam("saltForms") Set<SaltForm> saltForms, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("parents", Parent.findParentsBySaltForms(saltForms, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Parent.countFindParentsBySaltForms(saltForms) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("parents", Parent.findParentsBySaltForms(saltForms, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "parents/list";
    }
    
}
