// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.cmpdreg.domain;

import com.labsynch.cmpdreg.domain.SaltForm;
import com.labsynch.cmpdreg.domain.SaltFormAlias;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect SaltFormAlias_Roo_Finder {
    
    public static Long SaltFormAlias.countFindSaltFormAliasesByAliasNameEqualsAndLsTypeEqualsAndLsKindEquals(String aliasName, String lsType, String lsKind) {
        if (aliasName == null || aliasName.length() == 0) throw new IllegalArgumentException("The aliasName argument is required");
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = SaltFormAlias.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM SaltFormAlias AS o WHERE o.aliasName = :aliasName  AND o.lsType = :lsType  AND o.lsKind = :lsKind", Long.class);
        q.setParameter("aliasName", aliasName);
        q.setParameter("lsType", lsType);
        q.setParameter("lsKind", lsKind);
        return ((Long) q.getSingleResult());
    }
    
    public static Long SaltFormAlias.countFindSaltFormAliasesBySaltForm(SaltForm saltForm) {
        if (saltForm == null) throw new IllegalArgumentException("The saltForm argument is required");
        EntityManager em = SaltFormAlias.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM SaltFormAlias AS o WHERE o.saltForm = :saltForm", Long.class);
        q.setParameter("saltForm", saltForm);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<SaltFormAlias> SaltFormAlias.findSaltFormAliasesByAliasNameEqualsAndLsTypeEqualsAndLsKindEquals(String aliasName, String lsType, String lsKind) {
        if (aliasName == null || aliasName.length() == 0) throw new IllegalArgumentException("The aliasName argument is required");
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = SaltFormAlias.entityManager();
        TypedQuery<SaltFormAlias> q = em.createQuery("SELECT o FROM SaltFormAlias AS o WHERE o.aliasName = :aliasName  AND o.lsType = :lsType  AND o.lsKind = :lsKind", SaltFormAlias.class);
        q.setParameter("aliasName", aliasName);
        q.setParameter("lsType", lsType);
        q.setParameter("lsKind", lsKind);
        return q;
    }
    
    public static TypedQuery<SaltFormAlias> SaltFormAlias.findSaltFormAliasesByAliasNameEqualsAndLsTypeEqualsAndLsKindEquals(String aliasName, String lsType, String lsKind, String sortFieldName, String sortOrder) {
        if (aliasName == null || aliasName.length() == 0) throw new IllegalArgumentException("The aliasName argument is required");
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = SaltFormAlias.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM SaltFormAlias AS o WHERE o.aliasName = :aliasName  AND o.lsType = :lsType  AND o.lsKind = :lsKind");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<SaltFormAlias> q = em.createQuery(queryBuilder.toString(), SaltFormAlias.class);
        q.setParameter("aliasName", aliasName);
        q.setParameter("lsType", lsType);
        q.setParameter("lsKind", lsKind);
        return q;
    }
    
    public static TypedQuery<SaltFormAlias> SaltFormAlias.findSaltFormAliasesBySaltForm(SaltForm saltForm) {
        if (saltForm == null) throw new IllegalArgumentException("The saltForm argument is required");
        EntityManager em = SaltFormAlias.entityManager();
        TypedQuery<SaltFormAlias> q = em.createQuery("SELECT o FROM SaltFormAlias AS o WHERE o.saltForm = :saltForm", SaltFormAlias.class);
        q.setParameter("saltForm", saltForm);
        return q;
    }
    
    public static TypedQuery<SaltFormAlias> SaltFormAlias.findSaltFormAliasesBySaltForm(SaltForm saltForm, String sortFieldName, String sortOrder) {
        if (saltForm == null) throw new IllegalArgumentException("The saltForm argument is required");
        EntityManager em = SaltFormAlias.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM SaltFormAlias AS o WHERE o.saltForm = :saltForm");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<SaltFormAlias> q = em.createQuery(queryBuilder.toString(), SaltFormAlias.class);
        q.setParameter("saltForm", saltForm);
        return q;
    }
    
}
