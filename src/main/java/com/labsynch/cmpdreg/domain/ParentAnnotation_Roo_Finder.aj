// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.cmpdreg.domain;

import com.labsynch.cmpdreg.domain.ParentAnnotation;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect ParentAnnotation_Roo_Finder {
    
    public static Long ParentAnnotation.countFindParentAnnotationsByCodeEquals(String code) {
        if (code == null || code.length() == 0) throw new IllegalArgumentException("The code argument is required");
        EntityManager em = ParentAnnotation.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ParentAnnotation AS o WHERE o.code = :code", Long.class);
        q.setParameter("code", code);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<ParentAnnotation> ParentAnnotation.findParentAnnotationsByCodeEquals(String code) {
        if (code == null || code.length() == 0) throw new IllegalArgumentException("The code argument is required");
        EntityManager em = ParentAnnotation.entityManager();
        TypedQuery<ParentAnnotation> q = em.createQuery("SELECT o FROM ParentAnnotation AS o WHERE o.code = :code", ParentAnnotation.class);
        q.setParameter("code", code);
        return q;
    }
    
    public static TypedQuery<ParentAnnotation> ParentAnnotation.findParentAnnotationsByCodeEquals(String code, String sortFieldName, String sortOrder) {
        if (code == null || code.length() == 0) throw new IllegalArgumentException("The code argument is required");
        EntityManager em = ParentAnnotation.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM ParentAnnotation AS o WHERE o.code = :code");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<ParentAnnotation> q = em.createQuery(queryBuilder.toString(), ParentAnnotation.class);
        q.setParameter("code", code);
        return q;
    }
    
}
